actor dupframe2block () uint(size=8) I_pixel ==> uint(size=8) O_pixel, uint(size=8) D_pixel:

	int f_width  = 352;
	int f_height = 288;
	int fp_height = (f_height*3)/2;
	int b_size   = 8;
	int b_size2  = b_size*b_size;
	int b2_size  = b_size/2;
	int b2_size2 = b2_size * b2_size;
	int b_width  = f_width/b_size;
	int b_height = f_height/b_size;	
	uint(size=8) frame_num := 0;
	uint(size=8) frame_r := 0;
	uint(size=8) w_block_num := 0;
	uint(size=8) h_block_num := 0;
	uint(size=16) px := 0;
	uint(size=16) py := 0;
	bool frame_received := false;
	int frames = 10;
	bool y_done := false;
	bool u_done := false;
	bool v_done := false;

	@native function getBlockPixel(uint(size=8)  w_block_num,uint(size=8) h_block_num,int x,int y) --> uint(size=8) end
	@native function getYBlockPixel(uint(size=8)  w_block_num,uint(size=8) h_block_num,int x,int y) --> uint(size=8) end
	@native function getUBlockPixel(uint(size=8)  w_block_num,uint(size=8) h_block_num,int x,int y) --> uint(size=8) end
	@native function getVBlockPixel(uint(size=8)  w_block_num,uint(size=8) h_block_num,int x,int y) --> uint(size=8) end
	@native procedure updateFrame(uint(size=8) in_pix,uint(size=16) x_pix,uint(size=16)y_pix) end
	
ReceiveFrame : action I_pixel:[ip] ==>
guard
	py < fp_height and frame_received = false
do

	updateFrame(ip,px,py);
	px := px+1;
	if px = f_width
	then
		py := py+1;
		px := 0;
	end
	if py = fp_height
	then
		py := 0;
		frame_r := frame_r + 1;
		// println("F2B Frame received"+frame_r);
		frame_received := true;
	end
end

SendYBlocks : action ==> O_pixel:[blk] repeat 64, D_pixel:[blk] repeat 64
guard
	frame_received = true and y_done = false
var
	uint(size=5) idx := 0,
	List(type:uint(size=8),size=64) blk
do
	foreach int y in 0 .. (b_size-1)
	do
		foreach int x in 0 .. (b_size-1)
		do
			blk[idx] := getYBlockPixel(w_block_num,h_block_num,x,y);
			idx := idx+1;
		end
	end
	w_block_num := w_block_num+1;
	if w_block_num >= b_width
	then
		w_block_num := 0;
		h_block_num := h_block_num+1;
	end
	//println("F2B Y Block sent X: "+ w_block_num + " Y: "+h_block_num);
	if h_block_num >= b_height
	then
		h_block_num := 0;
		//frame_num := frame_num+1;
		//println("F2B Frame Y all sent: "+frame_num);
		//frame_received := false;
		y_done := true;
		u_done := false;
		v_done := false;
	end
end

SendUBlocks : action ==> O_pixel:[blk] repeat 16, D_pixel:[blk] repeat 16
guard
	frame_received = true and y_done = true and u_done = false
var
	uint(size=5) idx := 0,
	List(type:uint(size=8),size=16) blk
do
	foreach int y in 0 .. (b2_size-1)
	do
		foreach int x in 0 .. (b2_size-1)
		do
			blk[idx] := getUBlockPixel(w_block_num,h_block_num,x,y);
			idx := idx+1;
		end
	end
	w_block_num := w_block_num+1;
	if w_block_num >= b_width*2
	then
		w_block_num := 0;
		h_block_num := h_block_num+1;
	end
	//println("F2B U Block sent X: "+ w_block_num + " Y: "+h_block_num);
	if h_block_num >= b_height/2
	then
		h_block_num := 0;
		//frame_num := frame_num+1;
		//println("F2B U Frame sent: "+frame_num);
		//frame_received := false;
		y_done := true;
		u_done := true;
		v_done := false;
	end
end

SendVBlocks : action ==> O_pixel:[blk] repeat 16, D_pixel:[blk] repeat 16
guard
	frame_received = true and y_done = true and u_done = true and v_done = false
var
	uint(size=5) idx := 0,
	List(type:uint(size=8),size=64) blk
do
	foreach int y in 0 .. (b2_size-1)
	do
		foreach int x in 0 .. (b2_size-1)
		do
			blk[idx] := getVBlockPixel(w_block_num,h_block_num,x,y);
			idx := idx+1;
		end
	end
	w_block_num := w_block_num+1;
	if w_block_num >= b_width*2
	then
		w_block_num := 0;
		h_block_num := h_block_num+1;
	end
	//println("F2B V Block sent X: "+ w_block_num + " Y: "+h_block_num);
	if h_block_num >= b_height/2
	then
		h_block_num := 0;
		//println("F2B V Frame sent: "+frame_num);
		y_done := true;
		u_done := true;
		v_done := true;
	end
end

SentFrame : action ==>
guard
	frame_received = true and y_done = true and u_done = true and v_done = true
do
	frame_num := frame_num+1;
	if frame_num = frames
	then
		println("File reading done");
	else
		y_done := false;
		u_done := false;
		v_done := false;
		frame_received := false;
	end
end

end