actor Insert_average_vote () int(size = 1) msg_input, int(size=13) dct_input ==> int(size = 13) output:
    
    bool lastDctIdxIsOdd := false;
    @native function check_last_idx(int b) --> bool end
	
DCT_BUFFERING:	action dct_input:[a] repeat 64, msg_input:[b]  ==> output:[out2] repeat 64
	var int out[64], int(size=13) out2[64]
	do
	foreach int s in 0 .. 59 do
		out2[s] := a[s];
		println("DCT_BUFFERING_average_vote: Directly sending DCT input to output " + out2[s]);
	end
	foreach int t in 60 .. 63 do
		lastDctIdxIsOdd := 	check_last_idx(a[t]);
		if b = 0 then
			if lastDctIdxIsOdd then
				a[t] := a[t] +1;
				println("DCT_BUFFERING_average_vote: index " +t+ " is odd and want to send 0 changing to " + a[t]);
			else
				println("DCT_BUFFERING_average_vote: index " +t+ " is even and want to send 0 sending " + a[t]);
			end
		else
			if lastDctIdxIsOdd then
				println("DCT_BUFFERING_average_vote: index" +t+  "is odd and want to send 1 sending " + a[t]);
			else
				a[t] := a[t] +1;
				println("DCT_BUFFERING: index" +t+ "is even and want to send 1 changing to " + a[t]);
			end
		end
		out2[t] := a[t];
		println("DCT_BUFFERING: Done sending " + out2[t] + " for index " + t);	
	end
end

DCT_BYPASS:	action dct_input:[a] repeat 64 ==> output:[out2] repeat 64
	var int out[64], int(size=13) out2[64]
	do
	foreach int s in 0 .. 63 do
		out2[s] := a[s];
		println("DCT_BYPASS: Directly sending DCT input to output " + out2[s]);
	end
    println("DCT_BYPASS: Done sending ");
end

priority 
	DCT_BUFFERING > DCT_BYPASS;
end	
end