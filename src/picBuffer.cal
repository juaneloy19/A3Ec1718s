actor picBuffer () uint(size=8) I_pixel, bool EOF  ==> uint(size=8) O_pixel:

	int f_width  = 352;
	int f_height = 288;
	int b_size   = 8;
	int b_width  = f_width/b_size;
	int b_height = f_height/b_size;	
	uint(size=8) frame_num := 0;
	uint(size=8) frame_r := 0;
	uint(size=8) w_block_num := 0;
	uint(size=8) h_block_num := 0;
	uint(size=16) px := 0;
	uint(size=16) py := 0;
	bool frame_received := false;
	// bool frame_sent := false;
	
	@native function getBlockPixel(uint(size=8) w_block_num,uint(size=8) h_block_num,int x,int y) --> uint(size=8) end
	@native procedure updateFrame(uint(size=8) in_pix,uint(size=16) x_pix,uint(size=16)y_pix) end
	
ReceiveFrame : action I_pixel:[ip], EOF:[eof] ==>
guard
	py < f_height and eof = false and frame_received = false
do

	updateFrame(ip,px,py);
	px := px+1;
	if px = f_width
	then
		py := py+1;
		px := 0;
	end
	if py = f_height
	then
		py := 0;
		frame_r := frame_r+1;
		println("Frame received"+frame_r);
		frame_received := true;
	end

end

SendBlock : action EOF:[eof] ==> O_pixel:[blk] repeat 64
guard
	eof = false and frame_received = true
var
	uint(size=5) idx := 0,
	List(type:uint(size=8),size=64) blk
do
	foreach int y in 0 .. 7
	do
		foreach int x in 0 .. 7
		do
			blk[idx] := getBlockPixel(w_block_num,h_block_num,x,y);
			idx := idx+1;
		end
	end
	w_block_num := w_block_num+1;
	if w_block_num >= b_width
	then
		w_block_num := 0;
		h_block_num := h_block_num+1;
	end
	if h_block_num >= b_height
	then
		h_block_num := 0;
		frame_num := frame_num+1;
		println("Frame: "+frame_num);
		frame_received := false;
	end
end

FileDone : action EOF:[eof] ==> 
guard
	eof = true
do
	println("File Done");
end

/*NextBlock : action ==>
guard
	w_block_num >= b_width
do
	h_block_num := h_block_num+1;
	w_block_num := 0;
end*/

end