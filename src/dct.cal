/*
 * Copyright (c) 2010, Regents of the EPFL
 * 
 * All rights reserved.
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the Akatech SA, EPFL nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE REGENTS AND CONTRIBUTORS BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * Author : Ghislain Roquier
 */
package dct_jpeg;
 
actor dct () int(size=8) In ==> int(size=13) Out : 

	function pmul_1_1(int X) --> int :
		X - (X >> 3) - (X >> 7)
	end

	function pmul_1_2(int X) --> int
	var
		int tmp1 = (X >> 3) - (X >> 7),
		int tmp2 = tmp1 - (X >> 11) :
		tmp1 + (tmp2 >> 1)
	end

	function pmul_2_1(int X) --> int
	var
		int tmp = (X >> 9) - X :
		(tmp >> 2) - tmp
	end

	function pmul_2_2(int X) --> int :
		X >> 1
	end

	function pmul_3_1(int X) --> int
	var
		int tmp = X + (X >> 5) :
		(tmp >> 2) + (X >> 4)
	end

	function pmul_3_2(int X) --> int
	var
		int tmp = X + (X >> 5) :
		tmp - (tmp >> 2)
	end
	int A = 1024;

	int B = 1138;

	int C = 1730;

	int D = 1609;

	int E = 1264;

	int F = 1922;

	int G = 1788;

	int H = 2923;

	int I = 2718;

	int J = 2528;

	List(type: int, size=64) scale = [ 
		A, B, C, D, A, D, C, B, 
		B, E, F, G, B, G, F, E, 
		C, F, H, I, C, I, H, F, 
		D, G, I, J, D, J, I, G, 
		A, B, C, D, A, D, C, B,
	    D, G, I, J, D, J, I, G, 
	    C, F, H, I, C, I, H, F, 
	    B, E, F, G, B, G, F, E ];
	
	procedure fdct1d(int x[64], int y[64])
	var
		int x0 , int x1 , int x2 , int x3 , int x4 , int x5 , int x6 , int x7 , int
		xa , int xb
	begin
		foreach int i in 0 .. 7 do
			x0 := x[8*i + 0] + x[8*i + 7];
			x1 := x[8*i + 0] - x[8*i + 7];
			x4 := x[8*i + 1] + x[8*i + 6];
			x5 := x[8*i + 1] - x[8*i + 6];
			x2 := x[8*i + 2] + x[8*i + 5];
			x3 := x[8*i + 2] - x[8*i + 5];
			x6 := x[8*i + 3] + x[8*i + 4];
			x7 := x[8*i + 3] - x[8*i + 4];
			xa := pmul_1_2(x3);
			x3 := pmul_1_1(x3);
			xb := pmul_1_2(x5);
			x5 := pmul_1_1(x5);
			x3 := x3 + xb;
			x5 := x5 - xa;
			xa := pmul_2_2(x1);
			x1 := pmul_2_1(x1);
			xb := pmul_2_2(x7);
			x7 := pmul_2_1(x7);
			x1 := x1 - xb;
			x7 := x7 + xa;
			xa := x1 + x3;
			x3 := x1 - x3;
			xb := x7 + x5;
			x5 := x7 - x5;
			x1 := xa + xb;
			x7 := xa - xb;
			xa := x0 + x6;
			x6 := x0 - x6;
			xb := x4 + x2;
			x2 := x4 - x2;
			x0 := xa + xb;
			x4 := xa - xb;
			xa := pmul_3_2(x2);
			x2 := pmul_3_1(x2);
			xb := pmul_3_2(x6);
			x6 := pmul_3_1(x6);
			x2 := xb + x2;
			x6 := x6 - xa;
			y[0*8 + i] := x0;
			y[1*8 + i] := x1;
			y[2*8 + i] := x2;
			y[3*8 + i] := x3;
			y[4*8 + i] := x4;
			y[5*8 + i] := x5;
			y[6*8 + i] := x6;
			y[7*8 + i] := x7;
		end
	end
	
	action In:[ x ] repeat 64 ==> Out:[ y4 ] repeat 64
	var int y[64], int y2[64], int y3[64], int(size=13) y4[64]
	do
		println("Start 8x8 DCT");
		foreach int s in 0 .. 63
		do
			println("In=" + x[s] + " count=" + s );
		end
		y := [ x[i] << 7 : for int i in 0 .. 63];
		fdct1d(y, y2);
		fdct1d(y2, y);
		y3 := [ (y[i] * scale[i] + 0x7FFFF - (y[i] >> 31)) >> 20 : for int i in 0 .. 63];
		y4 := [ (y[i] * scale[i] + 0x7FFFF - (y[i] >> 31)) >> 20 : for int i in 0 .. 63];
		foreach int s in 0 .. 63
		do
			println("PreeScale=" + y[s] + " Out32Bit=" + y3[s] + " Out13Bit=" + y4[s] + " count="  + s);
		end
		println("DCT Done");
	end

end